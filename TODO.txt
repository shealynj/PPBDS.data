# Next Meeting

# Priorities

We had a bug in which ui_submission was throwing an error that the object could not be found. The cause was that the writer had an old version of PPBDS.data installed, one which did not have that function. Problem solved! But how could that problem occur given that we have a renv.lock file which guarantees that we are all using the same version of all packages? Turns out that the renv.lock file was missing PPBDS.data. Problem solved! But then, no matter how many times I tried renv::snapshot() and other tricks, I could not add it. And, even when I added it by hand to renv.lock --- something you are not supposed to do! --- it still did not work.

Question: Are you allowed to add the package on which you are currently working to renv.lock? If the answer is No, how do you ensure that code in the package --- in the tutorials in this case --- which load up the current package are getting the latest version of the package?


Talk about Open Policing. Maybe San Antonia?

No more variable name changes. Need to steady state for the creation of tutorials. OK to add more variables.


* Clean up `sps`. Which variables do we need? What do they show? What should they be called?

* Let's take a careful tour of the data we have and make sure it is all good and sensible (sort of). Take ownership! No blaming your predecessors! As part of this, learn about making test cases from [R Packages](https://r-pkgs.org/tests.html) and add at least one test case for each data set. (Be smart in making these. It is OK to have a test case which tests the number of rows in trains because trains will always have 115 rows. It would be bad (or maybe not?) to have a test case like that for cces since the number of rows for will change once we add next year's data to it.) The definition of a "careful tour" is that you have looked at make_* for a data set, regenerated it, and added at least two test cases about it. You should certainly use any current stopifnot() as test cases and then remove them from the make_* files.

* Investigate "Note: found 217 marked UTF-8 strings"

* World Values

http://www.worldvaluessurvey.org/wvs.jsp

* See https://msberends.github.io/AMR for some ideas to improve website.


https://crimebythenumbers.com/

## Previous

Is there an issue about having library(NHANES) and such in our make_* scripts causing warnings when students just want to library(PPBDS.data)? Maybe this would go away if we changed these make_* files from scripts to functions? We certainly do not want to require anyone who installs this package to have these libraries. That is too much, especially since we will have lots of students installing this package so they can do the tutorial.

Provide instruction in the lower part of this document about the release cycle. Like, first you increment the number, then you update NEWS file, then . . . Or just a link to the instructions in R Packages.

* Called `nominate`. DW NOMINATE from VoteView project: https://www.voteview.com/data.



* article section


## Other

* Don't mess with datasets until the tutorials are over.

* Add gender column to qscores, created by using names, which will probably involve creating a first name column, which we will not keep.

* Add inst/papers with all the relevant papers. Then from the help pages to these locations?

* Should we re-create all the data sets each time we run R CMD package check? This would not take too much time and would ensure that everything is ship-shape.



* pkgdown

  - Start using a release and development branch?

  - Look for nice themes or yaml options

  - Nicer graphics on home page.

  - Instead, we could have an "Article" which provided a list of all the tibbles along with the one paragraph description. Then, the front page could just have a basic blurb and one nice graphic.

  - Would it be useful to have another Article? Perhaps a guide to which data sets go well with which portions of the textbook?


### Data Sets

* Science experiment: https://science.sciencemag.org/content/358/6364/776/tab-figures-data

* Need something from Matt Blackwell's work on slavery. Ultimate use may just be in making an example for the maps appendix, which should be longer.

* Called `congress`. Something about the results of US congressional elections over several election cycles. 538? Really want this to include some measure of campaign spending so we can discuss a (potential) causal effect. Didn't they have a model which they used for the 2018 election? If they estimated a model, they must have some data.

* Called `police`. [Open police data](https://openpolicing.stanford.edu/data/). Something with millions of rows and, ideally, geographic coordinates. We won't include this data in our repo. Instead, the make_police.R script will download and process it. Ideally, we can get the final police.rda to be less than 100 meg so that we don't need to turn on git-lfs again.

* Maybe [GSS](http://gss.norc.org/). Isn't there already an R package? https://kjhealy.github.io/gssr/. Could issue a PR for changing the installation instructions to use remotes:: instead of devtools.

* FEC data. This is complex and important enough that it might become a stand-alone package. See [DIME](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/O5PX0B&version=2.2).

* Shiro: I also have a clean large dataset of satellite lights in Africa from this period using this paper: https://www.aeaweb.org/articles?id=10.1257/aer.20161385

* Called `deaths`. Maybe that demography data we used on the last day of 1005 this semester? Or is that too big?


## Overview

We are creating an R package, PPBDS.data, which will contain a collection of interesting tibbles, with a focus on political science and designed for classroom use. Their main use will be for Gov 50 and for the Preceptor's Primer. Each tibble will have a small number of variables, about as many as will fit across the screen when the tibble is printed. (Tibbles need to be simple since we don't want to overwhelm readers. The focus should be on the code and the models, not on the data.) See below for instructions on installing git-lfs. We might have one very "wide" tibble, just to have an example to work with when we want to try a model with lots of variables.

### Instructions

* Write scripts which create our data sets and adds them to our PPBDS.data package. Write associated help files. Skim [*R Packages*](https://r-pkgs.org/), but read closely the [data section](https://r-pkgs.org/data.html). Examine [covdata package](https://kjhealy.github.io/covdata/). Use **usethis** and **pkgdown** packages.

* Follow the conventions with the trains data: make_trains.R (in data-raw/), trains.rda (in data/), trains.R (in R/). Note that the name of the tibble -- "trains" -- appears in the file name of each of the three key things you are creating.

* Main workflow is that raw data is placed in the data-raw/ directory. It is read and cleaned in the make_name-of-tibble.R script, the last step of which is to create the name-of-tibble.rda file, using `usethis::use_data(name-of-tibble, overwrite = TRUE)`. The make_name-of-tibble.R has lots and lots of documentation, including the details of where the original data came from, and instructions on how to download it, if necessary. (At some point, we might turn this into a function, as Healy does, but not right now.) name-of-tibble.R provides the information for R to create the help file. It includes at least two paragraphs of background on the data source itself, ideally to include a key academic paper.

* Think hard about variable type. Don't make something a factor unless you have a reason to. If something has a natural order, then perhaps it should be an ordered factor. Document your reasoning in your make_name-of-tibble.R script. Examine the choices made in make_trains.R.


### pkgdown

* We are currently using pkgdown to make our website. But it is confusing and a bit fragile. Nor have I done a good job of documenting my lessons. Start [here](https://pkgdown.r-lib.org/articles/pkgdown.html). I had to run `usethis::use_pkgdown()` once, and then do some fussing to get the automated push stuff to work. Even though I only did this a few weeks ago, I have already forgotten the key steps. Weak! Document better!

* You need to use `pkgdown::build_site()` to create the site after you have made some changes.

* Need to make the home page nicer. Follow [these instructions](https://pkgdown.r-lib.org/reference/build_home.html).


### Package Versions

This section provides an overview of how to name package versions (see also https://r-pkgs.org/release.html#release-version). The development state of each package has a unique numbering such as "Version 1.2.3.9000". The version name usually consists of three or four digits, each of which stands for a specific type of change:

* "Major releases” are indicated by the first digit, or “1” in our example above. This number is incremented if we make changes to the package that are not backward compatible and may affect many people. An example would be if we delete an entire dataset or remove variables from an existing dataset. In other words, things that cause major problems in someone's code who is already using our package - try to avoid such changes whenever possible!

* "Minor releases” are indicated by the second digit, or “2” in our example. This number is incremented when we make bug fixes, add new features or make backward-compatible changes. This is the most common type of change, for instance when we add new datasets.

* "Patches” are indicated by the third digit, or “3” in our example. This number is incremented if we fix bugs without adding relevant new features, e.g. when making changes to help files.

* In-development packages, i.e. packages which are not yet released on CRAN (like ours), also have a fourth digit. The default value is usually set to 9000, as in the example above. This number is only incremented when we add important features that another in-development package should depend on. Since this is unlikely to be the case, we can leave the fourth digit at 9000 as long as PPBDS.data has not been published on CRAN (from then on only the first three digits will be used).

* No other digit, but a legitimate question is also: When do we change from 0.a.b to 1.0.0? The first digit should be set from 0 to 1 when our package is "feature complete". This could be the case if our package contains all necessary datasets a student needs in GOV 50. It could also mean that the package is in a state to be realeased on CRAN (or both). In the end, it's up to us to answer this question. Furthermore, note that as long as the first digit is still 0, non-backward compatible changes will be recorded by incrementing the second digit (and not the first, as described above).

Once we have made some changes and agreed on a proper name for the new version, we need to change the old name. First, we have to open the DESCRIPTION file and manually enter the correct version. Save the changes and run build_site() in the console. The new name of the version should now show on top of the homepage. Next, update the changelog which is generated by the NEWS.md file. Simply open the file and orientate yourself on the existing content to add a new entry. If everything looks right, save the changes and use build_site() again to see the result. While there is no rule on this, most packages mention the fourth digit only in the DESCRIPTION file and not in NEWS.md (I follow this convention as well). Whenever new changes are made, simply repeat the described process.


### git-lfs

Previously, we used git-lfs. See below for instructions. But, this led to Githib charging us too much money! So, we no longer need it, since we removed the anes_timeseries_cdf.dta from the repo.

Note that you need to have git-lfs installed to work with our repo because we use some big data sets. See [here](https://git-lfs.github.com/) for instructions. Note that the current Mac OS (Catalina) will give you a bit of a problem. To solve it, I did:

brew install git-lfs
xattr -d com.apple.quarantine /usr/local/bin/git-lfs

The first command is just a standard way of installing things on the Mac. The second step was necessary because Apple has tighted the safety checks on downloaded programs. At some point, only the first step will be necessary. But, for now, you need to do the second to confirm to Apple that git-lfs is safe.

Once you have done this, all your standard git commands will work as usual. Note that data-raw/ in in .Rbuildignore, so that directory is not included in the distributed package. That is cool since we don't want the package to force people to download hundreds of megs of raw data.


